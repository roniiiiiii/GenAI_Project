# -*- coding: utf-8 -*-
"""comparer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1msLSPxcCmuFnCQxdGGLsvZYRd2b0eHgX
"""

# comparer.py
import streamlit as st
import pandas as pd
from utils import load_image_and_metadata, encode_image_to_base64

def chat_about_comparison(client, meta1, meta2, comparative_analysis):
    """Chat interface for discussing the comparison with cross-cultural focus"""
    title1 = meta1.get('name', 'Artwork 1')
    artist1 = meta1.get('artist', 'Unknown')
    year1 = meta1.get('year', 'Unknown')
    nationality1 = meta1.get('nationality', 'Unknown')

    title2 = meta2.get('name', 'Artwork 2')
    artist2 = meta2.get('artist', 'Unknown')
    year2 = meta2.get('year', 'Unknown')
    nationality2 = meta2.get('nationality', 'Unknown')

    # Use a unique key for session state based on both artworks
    session_key = f"comparison_chat_{title1}_{title2}"

    # System prompt with cross-cultural analysis focus
    system_prompt = (
        f"You are Dr. Sarah Mitchell, a leading expert in comparative feminist art history. "
        f"You are comparing two artworks:\n"
        f"1. {title1} by {artist1} ({nationality1}, {year1})\n"
        f"2. {title2} by {artist2} ({nationality2}, {year2})\n\n"
        f"COMPARATIVE ANALYSIS:\n{comparative_analysis}\n\n"
        f"Your research focuses on identifying visual similarities and differences across nationalities in feminist art. "
        f"Analyze how universal themes of feminism were expressed through shared visual languages despite cultural differences.\n\n"
        f"When responding, follow this reasoning process:\n"
        f"1. Identify specific visual elements in both artworks\n"
        f"2. Compare how these elements appear across different cultural contexts\n"
        f"3. Explain cultural/national influences vs. universal feminist themes\n"
        f"4. Discuss what the comparison reveals about feminist visual strategies\n\n"
        f"Help users discover how feminist artists across different cultures developed both shared and distinct visual languages."
    )

    if session_key not in st.session_state or st.session_state.get("current_comparison") != (title1, title2):
        # Initial assistant message
        initial_message = (
            f"Hello! I'm Dr. Mitchell. Let's explore the comparison between '{title1}' and '{title2}'.\n\n"
            "I specialize in cross-cultural feminist art analysis. We can discuss:\n\n"
            "üîç Visual similarities and differences between the two artworks\n"
            "üåç How cultural contexts influenced each artist's approach\n"
            "‚öñÔ∏è Shared feminist themes despite different national backgrounds\n"
            "üé® Unique artistic strategies in each work\n\n"
            "What aspect of this comparison would you like to explore first?"
        )

        st.session_state[session_key] = [
            {"role": "system", "content": system_prompt},
            {"role": "assistant", "content": initial_message}
        ]
        st.session_state.current_comparison = (title1, title2)

    # Display chat history
    for msg in st.session_state[session_key][1:]:  # Skip system message
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # Chat input
    user_input = st.chat_input("Ask about the comparison, cultural differences, or artistic choices...")
    if user_input:
        st.session_state[session_key].append({"role": "user", "content": user_input})

        with st.chat_message("user"):
            st.markdown(user_input)

        with st.chat_message("assistant"):
            with st.spinner("Analyzing comparison..."):
                try:
                    # Pass the correct message history to the API
                    chat_response = client.chat.completions.create(
                        model="gpt-4o",
                        messages=st.session_state[session_key],
                        max_tokens=1024,
                        temperature=0.7
                    )
                    reply = chat_response.choices[0].message.content
                    st.write(reply)
                    st.session_state[session_key].append({"role": "assistant", "content": reply})
                except Exception as e:
                    error_msg = f"Error generating response: {str(e)}"
                    st.error(error_msg)
                    st.session_state[session_key].append({"role": "assistant", "content": error_msg})

def compare_two_artworks(client, metadata_df, available_images):
    set_custom_styles()
    st.title("Compare Two Artworks")

    if not available_images:
        st.error("No images found in the images directory")
        return

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### First Artwork")
        selected_filename1 = st.selectbox("Select first artwork", available_images, key="art1")

    with col2:
        st.markdown("### Second Artwork")
        selected_filename2 = st.selectbox("Select second artwork", available_images, key="art2")

    if selected_filename1 and selected_filename2 and selected_filename1 != selected_filename2:
        image1, _, meta1 = load_image_and_metadata(metadata_df, image_filename=selected_filename1)
        image2, _, meta2 = load_image_and_metadata(metadata_df, image_filename=selected_filename2)

        if image1 and image2:
            st.markdown("## Artworks Comparison")
            col1, col2 = st.columns(2)

            with col1:
                st.image(image1, caption=meta1.get('title', meta1.get('name', 'Artwork 1')) if meta1 else 'Artwork 1', use_container_width=True)
                if meta1:
                    metadata_display = []
                    for key, value in meta1.items():
                        if pd.notna(value) and value != "":
                            metadata_display.append(f"**{key.title()}:** {value}")
                    if metadata_display:
                        st.markdown("\n".join(metadata_display))

            with col2:
                st.image(image2, caption=meta2.get('title', meta2.get('name', 'Artwork 2')) if meta2 else 'Artwork 2', use_container_width=True)
                if meta2:
                    metadata_display = []
                    for key, value in meta2.items():
                        if pd.notna(value) and value != "":
                            metadata_display.append(f"**{key.title()}:** {value}")
                    if metadata_display:
                        st.markdown("\n".join(metadata_display))

            # REMOVED THE INDIVIDUAL ANALYSES AND OLD COMPARISON

            # Only show the generate analysis button and chat
            st.markdown("## üîç Comparative Analysis & Discussion")

            # Generate comparative analysis if not already done
            if 'comparative_analysis' not in st.session_state:
                if st.button("Generate Comparative Analysis", key="compare_btn",
                             help="Get feminist art comparison of these artworks",
                             use_container_width=True,
                             type="primary"):
                    with st.spinner("Analyzing artworks and generating comparison..."):
                        try:
                            base64_img1 = encode_image_to_base64(image1)
                            base64_img2 = encode_image_to_base64(image2)

                            comparative_prompt = (
                                "You are a feminist art historian. Compare the following two artworks. Focus on:\n"
                                "- Visual and thematic similarities\n"
                                "- Differences in artistic style and technique\n"
                                "- Cultural and historical significance\n"
                                "- Feminist perspectives or challenges represented\n"
                                "Provide a thoughtful and structured comparison."
                            )

                            response = client.chat.completions.create(
                                model="gpt-4o",
                                messages=[
                                    {
                                        "role": "user",
                                        "content": [
                                            {"type": "text", "text": comparative_prompt},
                                            {
                                                "type": "image_url",
                                                "image_url": {
                                                    "url": f"data:image/jpeg;base64,{base64_img1}",
                                                    "detail": "high"
                                                }
                                            },
                                            {
                                                "type": "image_url",
                                                "image_url": {
                                                    "url": f"data:image/jpeg;base64,{base64_img2}",
                                                    "detail": "high"
                                                }
                                            }
                                        ]
                                    }
                                ],
                                max_tokens=1500
                            )
                            comparative_analysis = response.choices[0].message.content

                            # Store for chat
                            st.session_state.comparative_analysis = comparative_analysis
                            st.session_state.comparison_meta1 = meta1
                            st.session_state.comparison_meta2 = meta2

                            # Display comparative analysis
                            st.markdown(f'<div class="analysis-section">{comparative_analysis}</div>', unsafe_allow_html=True)

                        except Exception as e:
                            st.error(f"Error generating comparative analysis: {str(e)}")

            # Show chat if comparison exists
            if 'comparative_analysis' in st.session_state:
                # Display comparative analysis if not shown yet
                if st.session_state.get("show_analysis_again", False):
                    st.markdown("### Comparative Analysis")
                    st.markdown(f'<div class="analysis-section">{st.session_state.comparative_analysis}</div>', unsafe_allow_html=True)

                st.markdown("### Discuss the Comparison")
                chat_about_comparison(
                    client,
                    st.session_state.comparison_meta1,
                    st.session_state.comparison_meta2,
                    st.session_state.comparative_analysis
                )
        else:
            st.error("Error loading one or both images.")
    else:
        st.info("Please select two different artworks to compare.")