# -*- coding: utf-8 -*-
"""web_art_search

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P4M9q5ERxA6ZCxdR1q0nLMy-hhWd_Qs6
"""

from langchain.tools import BaseTool
from pydantic import Field
import requests

class WebArtSearchTool(BaseTool):
    name: str = "web_art_search"
    description: str = "Search art on the web using SerpAPI"
    serpapi_key: str = Field(..., description="SerpAPI key for authentication")

    def _run(self, query: str) -> str:
        search_url = "https://serpapi.com/search"
        params = {
            "q": query,
            "engine": "google",
            "api_key": self.serpapi_key,
            "tbm": "isch",  # image search
        }
        try:
            response = requests.get(search_url, params=params)
            response.raise_for_status()
            data = response.json()

            images = data.get("images_results", [])
            if not images:
                return "No results found."

            results_summary = "\n".join(
                [f"{idx+1}. {img.get('title', 'No Title')} - {img.get('link', '')}" for idx, img in enumerate(images[:5])]
            )
            return results_summary
        except Exception as e:
            return f"Error during SerpAPI request: {e}"

    async def _arun(self, query: str) -> str:
        raise NotImplementedError("Async method not implemented.")